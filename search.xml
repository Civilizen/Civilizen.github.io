<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Grpc的一些知识</title>
    <url>/undefined/2022/11/11/Grpc%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="GRPC"><a href="#GRPC" class="headerlink" title="GRPC"></a>GRPC</h1><h2 id="ProtoBuf"><a href="#ProtoBuf" class="headerlink" title="ProtoBuf"></a>ProtoBuf</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><a href="https://developers.google.com/protocol-buffers/docs/overview">官方文档</a></p>
<p>protocol buffers （ProtoBuf）是一种语言无关、平台无关、可扩展的序列化结构数据的方法,它可用于（数据）通信协议、数据存储等.</p>
<p>Protocol Buffers 是一种灵活,高效,自动化机制的结构数据序列化方法－可类比 XML,但是比 XML 更小（3 ~ 10倍）、更快（20 ~ 100倍）、更为简单.</p>
<p>json\xml都是基于文本格式,protobuf是二进制格式.</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol>
<li><p>创建 .proto 文件,定义数据结构</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// filename: respose.proto</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定protobuf的版本,proto3是最新的语法版本,不指定则默认为proto2</span></span><br><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="comment">// 定义数据结构,message 你可以想象成java的class,c语言中的struct</span></span><br><span class="line">message Person &#123;</span><br><span class="line">    optional <span class="built_in">string</span> name = <span class="number">1</span>;<span class="comment">// 定义一个string类型的字段,字段名字为data, 字段号为1（字段号不能重复且唯一,删除字段的时候也尽量保持字段号,防止有人错误调用） </span></span><br><span class="line">    optional int32 id = <span class="number">2</span>;</span><br><span class="line">    optional <span class="built_in">string</span> email = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 序号是不能重复的,作为字段的位移标识</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将.proto文件,编译成指定语言类库(java)</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">john</span> <span class="operator">=</span> Person.newBuilder()</span><br><span class="line">    .setId(<span class="number">1234</span>)</span><br><span class="line">    .setName(<span class="string">&quot;John Doe&quot;</span>)</span><br><span class="line">    .setEmail(<span class="string">&quot;jdoe@example.com&quot;</span>)</span><br><span class="line">    .build();</span><br><span class="line">output = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(args[<span class="number">0</span>]);</span><br><span class="line">john.writeTo(output);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在代码中使用ProtoBuf对数据进行序列化和反序列化(c++)</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Person john;</span><br><span class="line"><span class="function">fstream <span class="title">input</span><span class="params">(argv[<span class="number">1</span>], ios::in | ios::binary)</span></span>;</span><br><span class="line">john.<span class="built_in">ParseFromIstream</span>(&amp;input);</span><br><span class="line"><span class="type">int</span> id = john.<span class="built_in">id</span>();</span><br><span class="line">std::string name = john.<span class="built_in">name</span>();</span><br><span class="line">std::string email = john.<span class="built_in">email</span>();</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><p>proto3利用package来标明类型,在C++中即定义为命名空间</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// In .proto</span></span><br><span class="line">package xxx;</span><br><span class="line"><span class="comment">// In .cc</span></span><br><span class="line"><span class="keyword">using</span> xxx::</span><br></pre></td></tr></table></figure>

<h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><p>message定义了proto的消息体，里面可以支持<a href="https://developers.google.com/protocol-buffers/docs/proto3#scalar">标量数据类型</a>, 复合数据类型等.字段号1-15使用一个字节,16-2047使用2个字节,尽量保留1-15给最频繁的元素.字段号$\in[1,2^{29}-1]$</p>
<p>在定义消息的字段时，可以定义字段规则.</p>
<table>
<thead>
<tr>
<th align="center">字段规则</th>
<th align="center">描述</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">singular</td>
<td align="center">字段号可以重复0或1次</td>
<td align="center">proto3的默认选择</td>
</tr>
<tr>
<td align="center">optional</td>
<td align="center">同singular, 字段号可以重复0或1次</td>
<td align="center">可以check该值是否被设置</td>
</tr>
<tr>
<td align="center">repeated</td>
<td align="center">字段号可以重复0或更多次</td>
<td align="center">重复的次序会被记录下来</td>
</tr>
</tbody></table>
<p>service定义rpc的服务</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">service SearchService &#123;</span><br><span class="line">  <span class="function">rpc <span class="title">Search</span><span class="params">(SearchRequest)</span> <span class="title">returns</span> <span class="params">(SearchResponse)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="一些其他的类型"><a href="#一些其他的类型" class="headerlink" title="一些其他的类型"></a>一些其他的类型</h4><p>oneof：在声明嵌套的数据类型时,oneof起到类似C++中union的作用,其使用方式如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// In .proto</span></span><br><span class="line">message SampleMessage &#123;</span><br><span class="line">  oneof test_oneof &#123;</span><br><span class="line">    string name = <span class="number">4</span>;</span><br><span class="line">    SubMessage sub_message = <span class="number">9</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// In .cc</span></span><br><span class="line">message.<span class="built_in">set_name</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="built_in">CHECK</span>(message.<span class="built_in">has_name</span>());</span><br><span class="line"><span class="comment">// Calling mutable_sub_message() will clear the name field and will set</span></span><br><span class="line"><span class="comment">// sub_message to a new instance of SubMessage with none of its fields set</span></span><br><span class="line">message.<span class="built_in">mutable_sub_message</span>();</span><br><span class="line"><span class="built_in">CHECK</span>(!message.<span class="built_in">has_name</span>());</span><br></pre></td></tr></table></figure>

<p>enum：枚举类型,定义枚举的时候，我们要保证第一个枚举值必须是0，枚举值不能重复，除非使用<code>option allow_alias = true</code>选项来开启别名,枚举值的范围为32位整数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">EnumAllowingAlias</span> &#123;</span><br><span class="line">    option allow_alias = <span class="literal">true</span>;<span class="comment">//</span></span><br><span class="line">    UNKNOWN = <span class="number">0</span>;</span><br><span class="line">    STARTED = <span class="number">1</span>;</span><br><span class="line">    RUNNING = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><h4 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">EnumAllowingAlias</span> &#123;</span></span><br><span class="line">  option allow_alias = <span class="literal">true</span>;<span class="comment">//默认为false,不允许两个字段名公用一个字段号</span></span><br><span class="line">  EAA_UNSPECIFIED = <span class="number">0</span>;<span class="comment">//从0开始</span></span><br><span class="line">  EAA_STARTED = <span class="number">1</span>;</span><br><span class="line">  EAA_RUNNING = <span class="number">1</span>;</span><br><span class="line">  EAA_FINISHED = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">EnumNotAllowingAlias</span> &#123;</span></span><br><span class="line">  ENAA_UNSPECIFIED = <span class="number">0</span>;</span><br><span class="line">  ENAA_STARTED = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// ENAA_RUNNING = 1;  // Uncommenting this line will cause a compile error inside Google and a warning message outside.</span></span><br><span class="line">  ENAA_FINISHED = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="grpc"><a href="#grpc" class="headerlink" title="grpc"></a>grpc</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>gRPC（Google Remote Procedure Call）是一款语言中立、平台中立、开源的远程过程调用(RPC)系统，使得能够更容易地创建分布式应用和服务,其基于HTTP&#x2F;2和ProtoBuf</p>
<blockquote>
<p>HTTP&#x2F;2 提供了连接多路复用、双向流、服务器推送、请求优先级、首部压缩等机制.可以节省带宽、降低TCP链接次数、节省CPU，帮助移动设备延长电池寿命等.</p>
</blockquote>
<p>优点：</p>
<ul>
<li>protobuf二进制消息，性能好&#x2F;效率高（空间和时间效率都很不错）</li>
<li>proto文件生成目标代码，简单易用</li>
<li>序列化反序列化直接对应程序中的数据类，不需要解析后在进行映射(XML,JSON都是这种方式)</li>
<li>支持向前兼容（新加字段采用默认值）和向后兼容（忽略新加字段），简化升级</li>
<li>支持多种语言（可以把proto文件看做IDL文件）</li>
</ul>
<p>缺点：</p>
<ul>
<li>GRPC尚未提供连接池，需要自行实现</li>
<li>尚未提供“服务发现”、“负载均衡”机制</li>
<li>因为基于HTTP2，绝大部多数HTTP Server、Nginx都尚不支持，即Nginx不能将GRPC请求作为HTTP请求来负载均衡，而是作为普通的TCP请求.（nginx1.9版本已支持）</li>
<li>Protobuf二进制可读性差（貌似提供了Text_Fromat功能）</li>
</ul>
<h3 id="简单流程"><a href="#简单流程" class="headerlink" title="简单流程"></a>简单流程</h3><p><a href="https://grpc.io/docs/languages/cpp/basics/">官方文档</a></p>
<ol>
<li>在.proto中定义服务</li>
<li>运用protocol buffer编译器生成客户端和服务端的代码</li>
<li>运用c++的grpc API写客户端和服务端</li>
</ol>
<h3 id="service种类"><a href="#service种类" class="headerlink" title="service种类"></a>service种类</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">service RouteGuide &#123;</span><br><span class="line">    <span class="function">rpc <span class="title">GetFeature</span><span class="params">(Point)</span> <span class="title">returns</span> <span class="params">(Feature)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function">rpc <span class="title">ListFeatures</span><span class="params">(Rectangle)</span> <span class="title">returns</span> <span class="params">(stream Feature)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function">rpc <span class="title">RecordRoute</span><span class="params">(stream Point)</span> <span class="title">returns</span> <span class="params">(RouteSummary)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function">rpc <span class="title">RouteChat</span><span class="params">(stream RouteNote)</span> <span class="title">returns</span> <span class="params">(stream RouteNote)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="server端的实现"><a href="#server端的实现" class="headerlink" title="server端的实现"></a>server端的实现</h3><h4 id="第一步：继承Service-类"><a href="#第一步：继承Service-类" class="headerlink" title="第一步：继承Service 类"></a>第一步：继承Service 类</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现Service类的接口（同步接口）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RouteGuideImpl</span> <span class="keyword">final</span> : <span class="keyword">public</span> RouteGuide::Service &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或实现Service类的接口（异步接口）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RouteGuideImpl</span> <span class="keyword">final</span> : <span class="keyword">public</span> RouteGuide::AsyncService &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="第二步：实现Service的功能"><a href="#第二步：实现Service的功能" class="headerlink" title="第二步：实现Service的功能"></a>第二步：实现Service的功能</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 点对点</span></span><br><span class="line"><span class="function">Status <span class="title">GetFeature</span><span class="params">(ServerContext* context, <span class="type">const</span> Point* point,</span></span></span><br><span class="line"><span class="params"><span class="function">                  Feature* feature)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 定义service 的操作</span></span><br><span class="line">  <span class="comment">// notation!!!! 所有的服务是被多线程调用的,要保证线程安全</span></span><br><span class="line">  feature-&gt;<span class="built_in">set_name</span>(<span class="built_in">GetFeatureName</span>(*point, feature_list_));</span><br><span class="line">  feature-&gt;<span class="built_in">mutable_location</span>()-&gt;<span class="built_in">CopyFrom</span>(*point);</span><br><span class="line">  <span class="comment">// 返回状态码</span></span><br><span class="line">  <span class="keyword">return</span> Status::OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点到流</span></span><br><span class="line"><span class="function">Status <span class="title">ListFeatures</span><span class="params">(ServerContext* context, <span class="type">const</span> Rectangle* rectangle,</span></span></span><br><span class="line"><span class="params"><span class="function">                    ServerWriter&lt;Feature&gt;* writer)</span> <span class="keyword">override</span> </span>&#123;<span class="comment">// 用ServerWriter容器处理流数据,用于返回给client</span></span><br><span class="line">  <span class="keyword">auto</span> lo = rectangle-&gt;<span class="built_in">lo</span>();</span><br><span class="line">  <span class="keyword">auto</span> hi = rectangle-&gt;<span class="built_in">hi</span>();</span><br><span class="line">  <span class="type">long</span> left = std::<span class="built_in">min</span>(lo.<span class="built_in">longitude</span>(), hi.<span class="built_in">longitude</span>());</span><br><span class="line">  <span class="type">long</span> right = std::<span class="built_in">max</span>(lo.<span class="built_in">longitude</span>(), hi.<span class="built_in">longitude</span>());</span><br><span class="line">  <span class="type">long</span> top = std::<span class="built_in">max</span>(lo.<span class="built_in">latitude</span>(), hi.<span class="built_in">latitude</span>());</span><br><span class="line">  <span class="type">long</span> bottom = std::<span class="built_in">min</span>(lo.<span class="built_in">latitude</span>(), hi.<span class="built_in">latitude</span>());</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">const</span> Feature&amp; f : feature_list_) &#123;<span class="comment">// &quot;message名_list_&quot; 代表某message流数据</span></span><br><span class="line">    <span class="keyword">if</span> (f.<span class="built_in">location</span>().<span class="built_in">longitude</span>() &gt;= left &amp;&amp;</span><br><span class="line">        f.<span class="built_in">location</span>().<span class="built_in">longitude</span>() &lt;= right &amp;&amp;</span><br><span class="line">        f.<span class="built_in">location</span>().<span class="built_in">latitude</span>() &gt;= bottom &amp;&amp;</span><br><span class="line">        f.<span class="built_in">location</span>().<span class="built_in">latitude</span>() &lt;= top) &#123;</span><br><span class="line">      writer-&gt;<span class="built_in">Write</span>(f);<span class="comment">// 运用Write方法写入数据流</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回状态码</span></span><br><span class="line">  <span class="keyword">return</span> Status::OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 流到流</span></span><br><span class="line"><span class="function">Status <span class="title">RouteChat</span><span class="params">(ServerContext* context,</span></span></span><br><span class="line"><span class="params"><span class="function">                  ServerReaderWriter&lt;RouteNote, RouteNote&gt;* stream)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">  RouteNote note;</span><br><span class="line">  <span class="comment">//ServerReaderWriter 既能读又能写,流到单时用的是ServerReader</span></span><br><span class="line">  <span class="keyword">while</span> (stream-&gt;<span class="built_in">Read</span>(&amp;note)) &#123;<span class="comment">// 处理流数据的方式就是用循环控制一个个读入request的内容</span></span><br><span class="line">    <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mu_)</span></span>;<span class="comment">//上锁！！！</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> RouteNote&amp; n : received_notes_) &#123;<span class="comment">// received_notes_ 是输入流</span></span><br><span class="line">      <span class="keyword">if</span> (n.<span class="built_in">location</span>().<span class="built_in">latitude</span>() == note.<span class="built_in">location</span>().<span class="built_in">latitude</span>() &amp;&amp;</span><br><span class="line">          n.<span class="built_in">location</span>().<span class="built_in">longitude</span>() == note.<span class="built_in">location</span>().<span class="built_in">longitude</span>()) &#123;</span><br><span class="line">        stream-&gt;<span class="built_in">Write</span>(n);<span class="comment">// 运用Write方法写入数据流</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    received_notes_.<span class="built_in">push_back</span>(note);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> Status::OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="第三步-启动服务器"><a href="#第三步-启动服务器" class="headerlink" title="第三步,启动服务器"></a>第三步,启动服务器</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">RunServer</span><span class="params">(<span class="type">const</span> std::string&amp; db_path)</span> </span>&#123;</span><br><span class="line">  <span class="function">std::string <span class="title">server_address</span><span class="params">(<span class="string">&quot;0.0.0.0:50051&quot;</span>)</span></span>;</span><br><span class="line">  <span class="function">RouteGuideImpl <span class="title">service</span><span class="params">(db_path)</span></span>;</span><br><span class="line"></span><br><span class="line">  ServerBuilder builder;<span class="comment">// 用于创建服务端实例</span></span><br><span class="line">  builder.<span class="built_in">AddListeningPort</span>(server_address, grpc::<span class="built_in">InsecureServerCredentials</span>());<span class="comment">//绑定端口</span></span><br><span class="line">  builder.<span class="built_in">RegisterService</span>(&amp;service);<span class="comment">// 注册服务</span></span><br><span class="line">  <span class="function">std::unique_ptr&lt;Server&gt; <span class="title">server</span><span class="params">(builder.BuildAndStart())</span></span>;<span class="comment">// 创建和启动grpc服务器</span></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Server listening on &quot;</span> &lt;&lt; server_address &lt;&lt; std::endl;</span><br><span class="line">  server-&gt;<span class="built_in">Wait</span>();<span class="comment">// 阻塞等待被唤醒或者shutdown</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="client端的实现"><a href="#client端的实现" class="headerlink" title="client端的实现"></a>client端的实现</h3><h4 id="第一步：创建stub"><a href="#第一步：创建stub" class="headerlink" title="第一步：创建stub"></a>第一步：创建stub</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 建立通道channel</span></span><br><span class="line">grpc::<span class="built_in">CreateChannel</span>(<span class="string">&quot;localhost:50051&quot;</span>, grpc::<span class="built_in">InsecureChannelCredentials</span>());</span><br><span class="line"><span class="comment">// 通过channel创建stub</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"> <span class="built_in">RouteGuideClient</span>(std::shared_ptr&lt;ChannelInterface&gt; channel,</span><br><span class="line">                  <span class="type">const</span> std::string&amp; db)</span><br><span class="line">     : <span class="built_in">stub_</span>(RouteGuide::<span class="built_in">NewStub</span>(channel)) &#123;</span><br><span class="line">   ...</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h4 id="第二步：调用服务"><a href="#第二步：调用服务" class="headerlink" title="第二步：调用服务"></a>第二步：调用服务</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 点到点</span></span><br><span class="line">Point point;</span><br><span class="line">Feature feature;</span><br><span class="line">point = <span class="built_in">MakePoint</span>(<span class="number">409146138</span>, <span class="number">-746188906</span>);</span><br><span class="line"><span class="built_in">GetOneFeature</span>(point, &amp;feature);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GetOneFeature</span><span class="params">(<span class="type">const</span> Point&amp; point, Feature* feature)</span> </span>&#123;</span><br><span class="line">  ClientContext context;</span><br><span class="line">  Status status = stub_-&gt;<span class="built_in">GetFeature</span>(&amp;context, point, feature);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点到流</span></span><br><span class="line">std::unique_ptr&lt;ClientReader&lt;Feature&gt; &gt; <span class="built_in">reader</span>(</span><br><span class="line">    stub_-&gt;<span class="built_in">ListFeatures</span>(&amp;context, rect));</span><br><span class="line"><span class="keyword">while</span> (reader-&gt;<span class="built_in">Read</span>(&amp;feature)) &#123;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Found feature called &quot;</span></span><br><span class="line">            &lt;&lt; feature.<span class="built_in">name</span>() &lt;&lt; <span class="string">&quot; at &quot;</span></span><br><span class="line">            &lt;&lt; feature.<span class="built_in">location</span>().<span class="built_in">latitude</span>()/kCoordFactor_ &lt;&lt; <span class="string">&quot;, &quot;</span></span><br><span class="line">            &lt;&lt; feature.<span class="built_in">location</span>().<span class="built_in">longitude</span>()/kCoordFactor_ &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">Status status = reader-&gt;<span class="built_in">Finish</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 流到.</span></span><br><span class="line">std::unique_ptr&lt;ClientWriter&lt;Point&gt; &gt; <span class="built_in">writer</span>(</span><br><span class="line">    stub_-&gt;<span class="built_in">RecordRoute</span>(&amp;context, &amp;stats));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; kPoints; i++) &#123;</span><br><span class="line">  <span class="type">const</span> Feature&amp; f = feature_list_[<span class="built_in">feature_distribution</span>(generator)];</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Visiting point &quot;</span></span><br><span class="line">            &lt;&lt; f.<span class="built_in">location</span>().<span class="built_in">latitude</span>()/kCoordFactor_ &lt;&lt; <span class="string">&quot;, &quot;</span></span><br><span class="line">            &lt;&lt; f.<span class="built_in">location</span>().<span class="built_in">longitude</span>()/kCoordFactor_ &lt;&lt; std::endl;</span><br><span class="line">  <span class="keyword">if</span> (!writer-&gt;<span class="built_in">Write</span>(f.<span class="built_in">location</span>())) &#123;</span><br><span class="line">    <span class="comment">// Broken stream.</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(</span><br><span class="line">      <span class="built_in">delay_distribution</span>(generator)));</span><br><span class="line">&#125;</span><br><span class="line">writer-&gt;<span class="built_in">WritesDone</span>();</span><br><span class="line">Status status = writer-&gt;<span class="built_in">Finish</span>();</span><br><span class="line"><span class="keyword">if</span> (status.<span class="built_in">IsOk</span>()) &#123;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Finished trip with &quot;</span> &lt;&lt; stats.<span class="built_in">point_count</span>() &lt;&lt; <span class="string">&quot; points\n&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;Passed &quot;</span> &lt;&lt; stats.<span class="built_in">feature_count</span>() &lt;&lt; <span class="string">&quot; features\n&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;Travelled &quot;</span> &lt;&lt; stats.<span class="built_in">distance</span>() &lt;&lt; <span class="string">&quot; meters\n&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;It took &quot;</span> &lt;&lt; stats.<span class="built_in">elapsed_time</span>() &lt;&lt; <span class="string">&quot; seconds&quot;</span></span><br><span class="line">            &lt;&lt; std::endl;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;RecordRoute rpc failed.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="样例1-同步返回消息"><a href="#样例1-同步返回消息" class="headerlink" title="样例1: 同步返回消息"></a>样例1: 同步返回消息</h3><h4 id="proto文件"><a href="#proto文件" class="headerlink" title=".proto文件"></a>.proto文件</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;<span class="comment">// use proto3, not proto2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// java need these lines</span></span><br><span class="line">option java_multiple_files = <span class="literal">true</span>;</span><br><span class="line">option java_package = <span class="string">&quot;io.grpc.examples.helloworld&quot;</span>;</span><br><span class="line">option java_outer_classname = <span class="string">&quot;HelloWorldProto&quot;</span>;</span><br><span class="line">option objc_class_prefix = <span class="string">&quot;HLW&quot;</span>;</span><br><span class="line"></span><br><span class="line">package helloworld;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// The greeting service definition.</span></span><br><span class="line">service Greeter &#123;</span><br><span class="line">  <span class="comment">// Sends a greeting</span></span><br><span class="line">  <span class="function">rpc <span class="title">SayHello</span> <span class="params">(HelloRequest)</span> <span class="title">returns</span> <span class="params">(HelloReply)</span> </span>&#123;&#125; <span class="comment">// define a rpc service</span></span><br><span class="line">  <span class="function">rpc <span class="title">SayHelloAgain</span> <span class="params">(HelloRequest)</span> <span class="title">returns</span> <span class="params">(HelloReply)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The request message containing the user&#x27;s name.</span></span><br><span class="line">message HelloRequest &#123;</span><br><span class="line">  string name = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The response message containing the greetings</span></span><br><span class="line">message HelloReply &#123;</span><br><span class="line">  string message = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="server-cc"><a href="#server-cc" class="headerlink" title="server.cc"></a>server.cc</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Logic and data behind the server&#x27;s behavior.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GreeterServiceImpl</span> <span class="keyword">final</span> : <span class="keyword">public</span> Greeter::Service &#123;</span><br><span class="line">  <span class="function">Status <span class="title">SayHello</span><span class="params">(ServerContext* context, <span class="type">const</span> HelloRequest* request,</span></span></span><br><span class="line"><span class="params"><span class="function">                  HelloReply* reply)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="function">std::string <span class="title">prefix</span><span class="params">(<span class="string">&quot;Hello &quot;</span>)</span></span>;</span><br><span class="line">    reply-&gt;<span class="built_in">set_message</span>(prefix + request-&gt;<span class="built_in">name</span>());</span><br><span class="line">    <span class="keyword">return</span> Status::OK;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">Status <span class="title">SayHelloAgain</span><span class="params">(ServerContext *context, <span class="type">const</span> HelloRequest* request,</span></span></span><br><span class="line"><span class="params"><span class="function">                       HelloReply* reply)</span> <span class="keyword">override</span></span>&#123;</span><br><span class="line">    <span class="function">std::string <span class="title">prefix</span><span class="params">(<span class="string">&quot;Hello again &quot;</span>)</span></span>;</span><br><span class="line">    std::string reversename = request-&gt;<span class="built_in">name</span>();</span><br><span class="line">    std::<span class="built_in">reverse</span>(reversename.<span class="built_in">begin</span>(),reversename.<span class="built_in">end</span>());</span><br><span class="line">    reply-&gt;<span class="built_in">set_message</span>(prefix+reversename);</span><br><span class="line">    <span class="keyword">return</span> Status::OK;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// run the server</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RunServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">std::string <span class="title">server_address</span><span class="params">(<span class="string">&quot;0.0.0.0:50051&quot;</span>)</span></span>;</span><br><span class="line">  GreeterServiceImpl service;<span class="comment">// 定义的服务类</span></span><br><span class="line"></span><br><span class="line">  grpc::<span class="built_in">EnableDefaultHealthCheckService</span>(<span class="literal">true</span>);</span><br><span class="line">  grpc::reflection::<span class="built_in">InitProtoReflectionServerBuilderPlugin</span>();</span><br><span class="line">  ServerBuilder builder;</span><br><span class="line">  <span class="comment">// Listen on the given address without any authentication mechanism.</span></span><br><span class="line">  builder.<span class="built_in">AddListeningPort</span>(server_address, grpc::<span class="built_in">InsecureServerCredentials</span>());<span class="comment">// 监听端口</span></span><br><span class="line">  <span class="comment">// Register &quot;service&quot; as the instance through which we&#x27;ll communicate with</span></span><br><span class="line">  <span class="comment">// clients. In this case it corresponds to an *synchronous* service.</span></span><br><span class="line">  builder.<span class="built_in">RegisterService</span>(&amp;service);<span class="comment">// 注册service</span></span><br><span class="line">  <span class="comment">// Finally assemble the server.</span></span><br><span class="line">  <span class="function">std::unique_ptr&lt;Server&gt; <span class="title">server</span><span class="params">(builder.BuildAndStart())</span></span>;<span class="comment">//组装服务</span></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Server listening on &quot;</span> &lt;&lt; server_address &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Wait for the server to shutdown. Note that some other thread must be</span></span><br><span class="line">  <span class="comment">// responsible for shutting down the server for this call to ever return.</span></span><br><span class="line">  server-&gt;<span class="built_in">Wait</span>();<span class="comment">// 启动并监听服务</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">RunServer</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="client-cc"><a href="#client-cc" class="headerlink" title="client.cc"></a>client.cc</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GreeterClient</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">GreeterClient</span>(std::shared_ptr&lt;Channel&gt; channel)<span class="comment">// 根据端口地址建立通信通道</span></span><br><span class="line">      : <span class="built_in">stub_</span>(Greeter::<span class="built_in">NewStub</span>(channel)) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Assembles the client&#x27;s payload, sends it and presents the response back</span></span><br><span class="line">  <span class="comment">// from the server.</span></span><br><span class="line">  <span class="function">std::string <span class="title">SayHello</span><span class="params">(<span class="type">const</span> std::string&amp; user)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Data we are sending to the server.</span></span><br><span class="line">    HelloRequest request;</span><br><span class="line">    request.<span class="built_in">set_name</span>(user);<span class="comment">// set_参数名 用于设置消息的内容</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Container for the data we expect from the server.</span></span><br><span class="line">    HelloReply reply;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Context for the client. It could be used to convey extra information to</span></span><br><span class="line">    <span class="comment">// the server and/or tweak certain RPC behaviors.</span></span><br><span class="line">    ClientContext context;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The actual RPC.</span></span><br><span class="line">    Status status = stub_-&gt;<span class="built_in">SayHello</span>(&amp;context, request, &amp;reply);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Act upon its status.</span></span><br><span class="line">    <span class="keyword">if</span> (status.<span class="built_in">ok</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> reply.<span class="built_in">message</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      std::cout &lt;&lt; status.<span class="built_in">error_code</span>() &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; status.<span class="built_in">error_message</span>()</span><br><span class="line">                &lt;&lt; std::endl;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;RPC failed&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::string <span class="title">SayHelloAgain</span><span class="params">(<span class="type">const</span> std::string&amp; user)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Follows the same pattern as SayHello.</span></span><br><span class="line">    HelloRequest request;</span><br><span class="line">    request.<span class="built_in">set_name</span>(user);</span><br><span class="line">    HelloReply reply;</span><br><span class="line">    ClientContext context;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Here we can use the stub&#x27;s newly available method we just added.</span></span><br><span class="line">    Status status = stub_-&gt;<span class="built_in">SayHelloAgain</span>(&amp;context, request, &amp;reply);<span class="comment">// 调用服务端的已定义service</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Act upon its status.</span></span><br><span class="line">    <span class="keyword">if</span> (status.<span class="built_in">ok</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> reply.<span class="built_in">message</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      std::cout &lt;&lt; status.<span class="built_in">error_code</span>() &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; status.<span class="built_in">error_message</span>()</span><br><span class="line">                &lt;&lt; std::endl;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;RPC failed&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  std::unique_ptr&lt;Greeter::Stub&gt; stub_;<span class="comment">// 通信所用的类</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Instantiate the client. It requires a channel, out of which the actual RPCs</span></span><br><span class="line">  <span class="comment">// are created. This channel models a connection to an endpoint specified by</span></span><br><span class="line">  <span class="comment">// the argument &quot;--target=&quot; which is the only expected argument.</span></span><br><span class="line">  <span class="comment">// We indicate that the channel isn&#x27;t authenticated (use of</span></span><br><span class="line">  <span class="comment">// InsecureChannelCredentials()).</span></span><br><span class="line">  std::string target_str;</span><br><span class="line">  <span class="function">std::string <span class="title">arg_str</span><span class="params">(<span class="string">&quot;--target&quot;</span>)</span></span>;</span><br><span class="line">  <span class="keyword">if</span> (argc &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    std::string arg_val = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="type">size_t</span> start_pos = arg_val.<span class="built_in">find</span>(arg_str);</span><br><span class="line">    <span class="keyword">if</span> (start_pos != std::string::npos) &#123;</span><br><span class="line">      start_pos += arg_str.<span class="built_in">size</span>();</span><br><span class="line">      <span class="keyword">if</span> (arg_val[start_pos] == <span class="string">&#x27;=&#x27;</span>) &#123;</span><br><span class="line">        target_str = arg_val.<span class="built_in">substr</span>(start_pos + <span class="number">1</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;The only correct argument syntax is --target=&quot;</span></span><br><span class="line">                  &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      std::cout &lt;&lt; <span class="string">&quot;The only acceptable argument is --target=&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    target_str = <span class="string">&quot;localhost:50051&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 通过channel 建立与目标端口的连接,用于与服务端通信</span></span><br><span class="line">  <span class="function">GreeterClient <span class="title">greeter</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">      grpc::CreateChannel(target_str, grpc::InsecureChannelCredentials()))</span></span>;</span><br><span class="line">  <span class="function">std::string <span class="title">user</span><span class="params">(<span class="string">&quot;world&quot;</span>)</span></span>;</span><br><span class="line">  std::string reply = greeter.<span class="built_in">SayHello</span>(user);</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Greeter received: &quot;</span> &lt;&lt; reply &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  reply = greeter.<span class="built_in">SayHelloAgain</span>(user);</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Greeter received: &quot;</span> &lt;&lt; reply &lt;&lt; std::endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/undefined/2022/11/10/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>如何利用Hexo配置github界面</title>
    <url>/undefined/2022/11/10/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8Hexo%E9%85%8D%E7%BD%AEgithub%E7%95%8C%E9%9D%A2/</url>
    <content><![CDATA[<h2 id="创建github账户和仓库"><a href="#创建github账户和仓库" class="headerlink" title="创建github账户和仓库"></a>创建github账户和仓库</h2><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>下载安装<a href="https://nodejs.org/en/download/">Node.js</a>,根据自己平台的属性选择,这里采用的环境是Ubuntu 20.04.</p>
<p>安装完成以后在bash中输入<code>node -v</code>和<code>npm -v</code>命令查看安装是否成功.</p>
<p>[option]如果没有梯子，可以选择添加国内镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>

<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>下载安装<a href="https://git-scm.com/downloads">Git</a></p>
<p>安装完成以后在bash中输入<code>git --version</code>验证是否安装成功.</p>
<h2 id="利用npm安装hexo"><a href="#利用npm安装hexo" class="headerlink" title="利用npm安装hexo"></a>利用npm安装hexo</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> blog &amp;&amp; <span class="built_in">cd</span> blog</span><br><span class="line"><span class="comment"># 安装Hexo</span></span><br><span class="line">npm i hexo-cli -g</span><br><span class="line"><span class="comment"># 查看Hexo版本</span></span><br><span class="line">hexo -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化hexo</span></span><br><span class="line">hexo init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装必要组件</span></span><br><span class="line">npm i hexo-deployer-git</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><p>输入<code>hexo new post &quot;article title&quot;</code>,新建文章,进入<code>source/_posts/</code>文件夹下修改相应的<code>.md</code>文件</p>
<p>输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>本地预览效果，最后输入<code>hexo d</code>上传到github上</p>
<h2 id="保存源代码"><a href="#保存源代码" class="headerlink" title="保存源代码"></a>保存源代码</h2><ol>
<li>创建github仓库(不需要创建readme),并获取到仓库的地址“<a href="mailto:&#x67;&#105;&#x74;&#64;&#103;&#x69;&#x74;&#x68;&#117;&#x62;&#46;&#x63;&#x6f;&#109;">&#x67;&#105;&#x74;&#64;&#103;&#x69;&#x74;&#x68;&#117;&#x62;&#46;&#x63;&#x6f;&#109;</a>:xxx&#x2F;blog.git”</li>
<li>在当前目录下执行以下命令</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin git@github.com:xxx/matlablearning.git </span><br><span class="line">git branch -b main</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;xxx&quot;</span></span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure>

<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g  <span class="comment"># generate static pages</span></span><br><span class="line">hexo s  <span class="comment"># start the server locally</span></span><br><span class="line">hexo d  <span class="comment"># update the pages to server</span></span><br><span class="line"></span><br><span class="line">hexo new [post] <span class="string">&quot;article name&quot;</span> <span class="comment"># generate a new article in source/_posts/ </span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
</search>
