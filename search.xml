<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>NetworkProgramCpp</title>
    <url>/undefined/2022/12/03/NetworkProgramCpp/</url>
    <content><![CDATA[<h1 id="如何使用-C-创建一个网络服务器"><a href="#如何使用-C-创建一个网络服务器" class="headerlink" title="如何使用 C++ 创建一个网络服务器"></a>如何使用 C++ 创建一个网络服务器</h1><h2 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h2><p>socket 套接字，在计算机领域是一种计算机通信之间约定的方式。在程序中，它就是一个整数类型。通过这种方式，一台计算机可以向接受其他计算机的数据，也可以向其他计算机传送数据。</p>
<h3 id="常用的套接字类型"><a href="#常用的套接字类型" class="headerlink" title="常用的套接字类型"></a>常用的套接字类型</h3><p><strong>流格式套接字</strong> (SOCK_STREAM)，也叫“面向连接的套接字”，在代码中使用 SOCK_STREAM 表示。SOCK_STREAM 是一种可靠的、双向的通信数据流，数据可以准确无误地到达另一台计算机，如果损坏或丢失，可以重新发送。流格式套接字使用的协议是TCP。</p>
<p>特征：</p>
<ul>
<li>数据在传输过程中不会消失</li>
<li>数据是按照顺序传输的</li>
<li>数据的发送和接收不是同步的</li>
</ul>
<p><strong>数据报格式套接字</strong> (SOCK_DGRAM)，也叫“无连接的套接字”，在代码中使用 SOCK_DGRAM 表示。SOCK_DGRAM 只负责传输数据，不进行数据的校验，如果数据在传输中发生了损坏，是没有办法补救的。由于不需要进行数据校验的操作，SOCK_DGRAM 比 SOCK_STREAM 效率更高。数据报格式套接字使用的协议是UDP。</p>
<p>特征：</p>
<ul>
<li>强调快速传输而非传输顺序</li>
<li>传输的数据可能丢失也可能损毁</li>
<li>限制每次传输的数据大小</li>
<li>数据的发送和接收是同步的</li>
</ul>
<h2 id="如何使用-socket-模拟计算机之间的通信"><a href="#如何使用-socket-模拟计算机之间的通信" class="headerlink" title="如何使用 socket 模拟计算机之间的通信"></a>如何使用 socket 模拟计算机之间的通信</h2><p>Server.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> sockfd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    第一个参数代表了 IPv4，IPv6 对应为 AF_INET6</span></span><br><span class="line"><span class="comment">    第二个参数代表了套接字的类型</span></span><br><span class="line"><span class="comment">    第三个参数代表了协议，0表示根据前面的两个参数自动推导协议类型。设置为IPPROTO_TCP和IPPTOTO_UDP，分别表示TCP和UDP。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 创建并初始化 serv_addr 对象，然后指定服务器的端口ip等信息</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> serv_addr;</span><br><span class="line">    <span class="built_in">bzero</span>(&amp;serv_addr, <span class="built_in">sizeof</span>(serv_addr));</span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_addr.s_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">    serv_addr.sin_port = <span class="built_in">htons</span>(<span class="number">8888</span>);</span><br><span class="line">    <span class="comment">// 将 socket 地址与文件描述符绑定</span></span><br><span class="line">    <span class="built_in">bind</span>(sockfd, (sockaddr*)&amp;serv_addr, <span class="built_in">sizeof</span>(serv_addr));</span><br><span class="line">    <span class="comment">// 监听 socket，第二个参数代表最大监听队列</span></span><br><span class="line">    <span class="built_in">listen</span>(sockfd, SOMAXCONN);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 要接受一个客户端连接，需要使用 accept 函数。对于每一个客户端，我们在接受连接时也需要保存客户端的socket地址信息</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> clnt_addr;</span><br><span class="line">    <span class="type">socklen_t</span> clnt_addr_len = <span class="built_in">sizeof</span>(clnt_addr);</span><br><span class="line">    <span class="built_in">bzero</span>(&amp;clnt_addr, <span class="built_in">sizeof</span>(clnt_addr));</span><br><span class="line">    <span class="comment">// accept函数会阻塞当前程序，直到有一个客户端socket被接受后程序才会往下运行。</span></span><br><span class="line">    <span class="type">int</span> clnt_sockfd = <span class="built_in">accept</span>(sockfd, (sockaddr*)&amp;clnt_addr, &amp;clnt_addr_len);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;new client fd %d! IP: %s Port: %d\n&quot;</span>, clnt_sockfd, <span class="built_in">inet_ntoa</span>(clnt_addr.sin_addr), <span class="built_in">ntohs</span>(clnt_addr.sin_port));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Client.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span>  <span class="comment">//这个头文件包含了&lt;netinet/in.h&gt;，不用再次包含了</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 步骤一：创建 socket</span></span><br><span class="line">    <span class="type">int</span> sockfd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 步骤二：创建并初始化 sockaddr_in 对象</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> serv_addr;</span><br><span class="line">    <span class="built_in">bzero</span>(&amp;serv_addr, <span class="built_in">sizeof</span>(serv_addr)); <span class="comment">// 初始化结构体</span></span><br><span class="line">    <span class="comment">// 步骤三：设置服务器的参数</span></span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_addr.s_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">    serv_addr.sin_port = <span class="built_in">htons</span>(<span class="number">8888</span>);</span><br><span class="line">    <span class="comment">// 步骤四：连接服务端</span></span><br><span class="line">    <span class="built_in">connect</span>(sockfd, (sockaddr*)&amp;serv_addr, <span class="built_in">sizeof</span>(serv_addr)); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="错误处理-Echo-服务器"><a href="#错误处理-Echo-服务器" class="headerlink" title="错误处理  &amp;&amp; Echo 服务器"></a>错误处理  &amp;&amp; Echo 服务器</h2><p>异常处理是在开发大型系统时需要的，将代码改写成带有异常处理的模式是非常必要的。</p>
<p>定义一个可供处理的异常的函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该函数传入一个条件，当条件满足时抛出异常，并显示相应的错误信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">errif</span><span class="params">(<span class="type">bool</span> condition, <span class="type">const</span> <span class="type">char</span> *errmsg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(condition)&#123;</span><br><span class="line">        <span class="built_in">perror</span>(errmsg);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们建立一个socket连接后，就可以使用&lt;unistd.h&gt;头文件中read和write来进行网络接口的数据读写操作。如果是UDP，需要使用sendto和recvfrom。</p>
<p>Server.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">1024</span>];     <span class="comment">//定义缓冲区</span></span><br><span class="line">    <span class="built_in">bzero</span>(&amp;buf, <span class="built_in">sizeof</span>(buf));       <span class="comment">//清空缓冲区</span></span><br><span class="line">    <span class="type">ssize_t</span> read_bytes = <span class="built_in">read</span>(clnt_sockfd, buf, <span class="built_in">sizeof</span>(buf)); <span class="comment">//从客户端socket读到缓冲区，返回已读数据大小</span></span><br><span class="line">    <span class="keyword">if</span>(read_bytes &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;message from client fd %d: %s\n&quot;</span>, clnt_sockfd, buf);  </span><br><span class="line">        <span class="built_in">write</span>(clnt_sockfd, buf, <span class="built_in">sizeof</span>(buf));           <span class="comment">//将相同的数据写回到客户端</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(read_bytes == <span class="number">0</span>)&#123;             <span class="comment">//read返回0，表示EOF</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;client fd %d disconnected\n&quot;</span>, clnt_sockfd);</span><br><span class="line">        <span class="built_in">close</span>(clnt_sockfd);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(read_bytes == <span class="number">-1</span>)&#123;        <span class="comment">//read返回-1，表示发生错误，按照上文方法进行错误处理</span></span><br><span class="line">        <span class="built_in">close</span>(clnt_sockfd);</span><br><span class="line">        <span class="built_in">errif</span>(<span class="literal">true</span>, <span class="string">&quot;socket read error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Client.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">1024</span>];     <span class="comment">//定义缓冲区</span></span><br><span class="line">    <span class="built_in">bzero</span>(&amp;buf, <span class="built_in">sizeof</span>(buf));       <span class="comment">//清空缓冲区</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf);             <span class="comment">//从键盘输入要传到服务器的数据</span></span><br><span class="line">    <span class="type">ssize_t</span> write_bytes = <span class="built_in">write</span>(sockfd, buf, <span class="built_in">sizeof</span>(buf));      <span class="comment">//发送缓冲区中的数据到服务器socket，返回已发送数据大小</span></span><br><span class="line">    <span class="keyword">if</span>(write_bytes == <span class="number">-1</span>)&#123;          <span class="comment">//write返回-1，表示发生错误</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;socket already disconnected, can&#x27;t write any more!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bzero</span>(&amp;buf, <span class="built_in">sizeof</span>(buf));       <span class="comment">//清空缓冲区 </span></span><br><span class="line">    <span class="type">ssize_t</span> read_bytes = <span class="built_in">read</span>(sockfd, buf, <span class="built_in">sizeof</span>(buf));    <span class="comment">//从服务器socket读到缓冲区，返回已读数据大小</span></span><br><span class="line">    <span class="keyword">if</span>(read_bytes &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;message from server: %s\n&quot;</span>, buf);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(read_bytes == <span class="number">0</span>)&#123;      <span class="comment">//read返回0，表示EOF，通常是服务器断开链接，等会儿进行测试</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;server socket disconnected!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(read_bytes == <span class="number">-1</span>)&#123;     <span class="comment">//read返回-1，表示发生错误，按照上文方法进行错误处理</span></span><br><span class="line">        <span class="built_in">close</span>(sockfd);</span><br><span class="line">        <span class="built_in">errif</span>(<span class="literal">true</span>, <span class="string">&quot;socket read error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="并发处理-epoll"><a href="#并发处理-epoll" class="headerlink" title="并发处理 epoll"></a>并发处理 epoll</h2><p>客户端往往都不只有一个，服务器需要响应不同客户端的请求，这就需要并发处理请求了。epoll系统可以实现服务端的IO复用，满足多客户端的需求。</p>
<p>epoll主要由三个系统调用组成：</p>
<p>- </p>
]]></content>
  </entry>
  <entry>
    <title>Cpp STL</title>
    <url>/undefined/2022/11/28/Cpp-STL/</url>
    <content><![CDATA[<h1 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h1><h2 id="顺序容器"><a href="#顺序容器" class="headerlink" title="顺序容器"></a>顺序容器</h2><table>
<thead>
<tr>
<th align="center">容器</th>
<th>描述</th>
<th align="center">查询</th>
<th align="center">插入</th>
<th align="center">删除</th>
</tr>
</thead>
<tbody><tr>
<td align="center">vector</td>
<td>可变大小数组</td>
<td align="center">$O(1)$</td>
<td align="center">$O(n)$</td>
<td align="center">$O(n)$</td>
</tr>
<tr>
<td align="center">deque</td>
<td>双端队列</td>
<td align="center">$O(n)$</td>
<td align="center">$O(1)$</td>
<td align="center">$O(1)$</td>
</tr>
<tr>
<td align="center">list</td>
<td>双向链表</td>
<td align="center">$O(n)$</td>
<td align="center">$O(1)$</td>
<td align="center">$O(1)$</td>
</tr>
<tr>
<td align="center">forward_list</td>
<td>单向列表</td>
<td align="center">$O(n)$</td>
<td align="center">$O(1)$</td>
<td align="center">$O(1)$</td>
</tr>
<tr>
<td align="center">string</td>
<td>可变大小的字符数组</td>
<td align="center">$O(1)$</td>
<td align="center">$O(n)$</td>
<td align="center">$O(n)$</td>
</tr>
<tr>
<td align="center">array</td>
<td>固定大小数组</td>
<td align="center">$O(n)$</td>
<td align="center">-</td>
<td align="center">-</td>
</tr>
</tbody></table>
<h2 id="关联容器"><a href="#关联容器" class="headerlink" title="关联容器"></a>关联容器</h2><table>
<thead>
<tr>
<th align="center">容器</th>
<th>描述</th>
<th align="center">底层实现</th>
<th align="center">查询</th>
<th align="center">插入</th>
<th align="center">删除</th>
<th align="center">修改</th>
</tr>
</thead>
<tbody><tr>
<td align="center">set</td>
<td>有序集合</td>
<td align="center">红黑树</td>
<td align="center">$O(log_n)$</td>
<td align="center">$O(log_n)$</td>
<td align="center">$O(log_n)$</td>
<td align="center">-</td>
</tr>
<tr>
<td align="center">multiset</td>
<td>元素可重复的有序集合</td>
<td align="center">红黑树</td>
<td align="center">$O(log_n)$</td>
<td align="center">$O(log_n)$</td>
<td align="center">$O(log_n)$</td>
<td align="center">-</td>
</tr>
<tr>
<td align="center">unordered_set</td>
<td>无序集合</td>
<td align="center">哈希表</td>
<td align="center">$O(1)$</td>
<td align="center">$O(1)$</td>
<td align="center">$O(1)$</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">map</td>
<td>有序键值对</td>
<td align="center">红黑树</td>
<td align="center">$O(log_n)$</td>
<td align="center">$O(log_n)$</td>
<td align="center">$O(log_n)$</td>
<td align="center">$O(log_n)$</td>
</tr>
<tr>
<td align="center">multimap</td>
<td>键可重复的有序键值对</td>
<td align="center">红黑树</td>
<td align="center">$O(log_n)$</td>
<td align="center">$O(log_n)$</td>
<td align="center">$O(log_n)$</td>
<td align="center">$O(log_n)$</td>
</tr>
<tr>
<td align="center">unordered_map</td>
<td>无序键值对</td>
<td align="center">哈希表</td>
<td align="center">$O(1)$</td>
<td align="center">$O(1)$</td>
<td align="center">$O(1)$</td>
<td align="center"></td>
</tr>
</tbody></table>
<p><strong>Note: STL 中的哈希表是使用开链法避免碰撞的</strong></p>
<h1 id="容器适配器"><a href="#容器适配器" class="headerlink" title="容器适配器"></a>容器适配器</h1><p>适配器是一种机制，能使某种事物的行为看起来像另一种事物一样。一个容器适配器接受一种已有的容器类型，使其看起来像一种不同的类型。所有的适配器都要求容器具有添加和删除以及访问尾元素的功能，故 array 和 forward_list 不能作为适配器的容器，</p>
<p><strong>注意：容器适配器没有迭代器，不能遍历！！！</strong></p>
<table>
<thead>
<tr>
<th align="center">适配器</th>
<th>描述</th>
<th align="center">默认底层容器</th>
<th>不可选的底层容器</th>
<th>提供的主要操作</th>
</tr>
</thead>
<tbody><tr>
<td align="center">stack</td>
<td>栈</td>
<td align="center">deque</td>
<td>array, forward_list</td>
<td>push_back, pop_back, back</td>
</tr>
<tr>
<td align="center">queue</td>
<td>队列</td>
<td align="center">deque</td>
<td>array, forward_list, vector</td>
<td>push_back, back, front, push_front</td>
</tr>
<tr>
<td align="center">priority_queue</td>
<td>优先队列</td>
<td align="center">vector</td>
<td>array, forward_list, list</td>
<td>front, push_back, pop_back</td>
</tr>
</tbody></table>
<p>在创建容器适配器时，可以指定其使用的容器</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">stack&lt;string&gt; stk;<span class="comment">// use deque as container</span></span><br><span class="line">stack&lt;string,vector&lt;string&gt;&gt; str_stk;<span class="comment">// use vector as container</span></span><br></pre></td></tr></table></figure>

<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><h2 id="插入迭代器"><a href="#插入迭代器" class="headerlink" title="插入迭代器"></a>插入迭代器</h2><p>插入器是一种迭代器适配器，它接受一个容器，生成一个迭代器，能实现向给定容器添加元素。</p>
<ul>
<li>back_insert: 创建一个使用 push_back 的迭代器</li>
<li>front_insert: 创建一个使用 push_front 的迭代器</li>
<li>insert: 创建一个使用 insert 的迭代器。此函数接受第二个参数，其指向给定容器的迭代器。元素将被插入到给定迭代器所表示的元素之前</li>
<li></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">*it = val;</span><br><span class="line">\\ --&gt;</span><br><span class="line">it = c.<span class="built_in">insert</span>(it,val);</span><br><span class="line">it++;</span><br><span class="line"></span><br><span class="line">list&lt;<span class="type">int</span>&gt; lst = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">list&lt;<span class="type">int</span>&gt; lst2, lst3;</span><br><span class="line"><span class="built_in">copy</span>(lst.<span class="built_in">cbegin</span>(), lst.<span class="built_in">cend</span>(), <span class="built_in">front_inserter</span>(lst2));</span><br><span class="line"><span class="comment">// lst2 = &#123;4, 3, 2, 1&#125;</span></span><br><span class="line"><span class="built_in">copy</span>(lst.<span class="built_in">cbegin</span>(), lst.<span class="built_in">cend</span>(), <span class="built_in">inserter</span>(lst3, lst3.<span class="built_in">begin</span>()));</span><br><span class="line"><span class="comment">// lst3 = &#123;1, 2, 3, 4&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="流迭代器"><a href="#流迭代器" class="headerlink" title="流迭代器"></a>流迭代器</h2><p>流迭代器用于处理IO对象。通过使用流迭代器，我们可以用泛型算法从流对象读取数据以及向其写入数据。</p>
<p>Example: 从标准输入流读入数据并存入一个vector对象中</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">istream_iterator&lt;<span class="type">int</span>&gt; <span class="title">int_iter</span><span class="params">(cin)</span></span>;<span class="comment">//从cin读取int</span></span><br><span class="line">istream_iterator&lt;<span class="type">int</span>&gt; eof;<span class="comment">//eof为空，可以定义为istream尾后迭代器</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line"><span class="keyword">while</span> (int_iter != eof)<span class="comment">//当有数据可供读取时</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//后置递增运算符，返回迭代器的旧值</span></span><br><span class="line">   <span class="comment">//解引用迭代器，获得从流读取的前一个值</span></span><br><span class="line">   vec.<span class="built_in">push_back</span>(*int_iter++);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Example: 从标准输入流读入数据并利用泛型算法计算数据的和</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">istream_iterator&lt;<span class="type">int</span>&gt; <span class="title">int_iter</span><span class="params">(cin)</span></span>;<span class="comment">//从cin读取int</span></span><br><span class="line">istream_iterator&lt;<span class="type">int</span>&gt; eof;<span class="comment">//eof为空，可以定义为istream尾后迭代器</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">accumulate</span>(int_iter, eof, <span class="number">0</span>) &lt;&lt; endl;</span><br></pre></td></tr></table></figure>

<h2 id="反向迭代器"><a href="#反向迭代器" class="headerlink" title="反向迭代器"></a>反向迭代器</h2><p>反向迭代器在容器中从尾元素向首元素反向移动，相比迭代器，反向迭代器的递增和递减的意义是反过来的。递增一个反向迭代器会移动到前一个元素，递减一个反向迭代器会移动到后一个元素。</p>
<p>一个有趣的例子：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string s = <span class="string">&quot;FIRST,MIDDLE,LAST&quot;</span>;</span><br><span class="line"><span class="keyword">auto</span> comma = <span class="built_in">find</span>(s.<span class="built_in">crbegin</span>(), s.<span class="built_in">crend</span>(), <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">cout &lt;&lt; <span class="built_in">string</span>(s.<span class="built_in">crbegin</span>(), comma) &lt;&lt; endl;</span><br><span class="line"><span class="comment">// TSAL</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">string</span>(comma.<span class="built_in">base</span>(), s.<span class="built_in">cend</span>()) &lt;&lt; endl;  </span><br><span class="line"><span class="comment">// LAST</span></span><br><span class="line"><span class="comment">// 反向迭代器的成员函数中有base，其作用是把其转化为普通迭代器</span></span><br></pre></td></tr></table></figure>

<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="if版本的泛型算法"><a href="#if版本的泛型算法" class="headerlink" title="_if版本的泛型算法"></a>_if版本的泛型算法</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">find</span>(beg, end, val);<span class="comment">// 查找输入范围中val第一次出现的位置</span></span><br><span class="line"><span class="built_in">find</span>(beg, end, pred);<span class="comment">// 查找第一次使pred为真的元素的位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除v1中的奇数元素</span></span><br><span class="line"><span class="built_in">remove_if</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), [](<span class="type">int</span> i) &#123;<span class="keyword">return</span> i % <span class="number">2</span>;&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="拷贝元素版本的泛型算法"><a href="#拷贝元素版本的泛型算法" class="headerlink" title="拷贝元素版本的泛型算法"></a>拷贝元素版本的泛型算法</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">reverse</span>(beg, end); <span class="comment">// 反转输入范围中的元素顺序</span></span><br><span class="line"><span class="built_in">reverse_copy</span>(beg, end, dest); <span class="comment">// 将范围内的元素逆序拷贝到dest中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将v1中的奇数元素删除后拷贝给v2，v1不变</span></span><br><span class="line"><span class="built_in">remove_copy_if</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), <span class="built_in">backinserter</span>(v2), [](<span class="type">int</span> i) &#123;<span class="keyword">return</span> i % <span class="number">2</span>;&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="Modern-C"><a href="#Modern-C" class="headerlink" title="Modern C++"></a>Modern C++</h1><h2 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h2><p>lambda 表达式实质上是一个可以调用的对象，一个 lambda 表达式表示一个可调用的代码单元，可以被理解为一个未命名的内联函数，与函数不同的是<strong>lambda表达式可能定义在函数内部</strong>。</p>
<p><strong>[capture list](parameter list) -&gt; return type{function body}</strong></p>
<h3 id="使用捕获列表"><a href="#使用捕获列表" class="headerlink" title="使用捕获列表"></a>使用捕获列表</h3><table>
<thead>
<tr>
<th>捕获类型</th>
<th>用法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>值捕获</td>
<td>[x]:捕获x变量的拷贝</td>
<td>前提是捕获的值是可以拷贝的，与参数不同，被捕获的变量是在lambda创建时的拷贝，不是调用时拷贝</td>
</tr>
<tr>
<td>引用捕获</td>
<td>[&amp;x]:捕获x的引用</td>
<td><strong>使用引用捕获的变量要保证在使用此变量时，该变量是存在的。</strong></td>
</tr>
<tr>
<td>隐式捕获</td>
<td>[&#x3D;]&#x2F;[&amp;]:分别对应值捕获和引用捕获</td>
<td>隐式捕获会根据lambda中的代码自动推导使用哪些变量，<strong>只会捕获代码中出现的变量</strong></td>
</tr>
<tr>
<td>混合捕获</td>
<td>[&amp;,x]&#x2F;[&#x3D;,&amp;x]</td>
<td>引用捕获除x之外的所有变量&#x2F;值捕获除x以外的所有变量</td>
</tr>
</tbody></table>
<h3 id="指定返回类型"><a href="#指定返回类型" class="headerlink" title="指定返回类型"></a>指定返回类型</h3><p>在lambda不能推导出返回类型的时候，需要显式地说明表达式的返回类型。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">function f = [](<span class="type">int</span> i)&#123;</span><br><span class="line">   <span class="keyword">return</span> i&gt;<span class="number">0</span>? i:-i;</span><br><span class="line">&#125;<span class="comment">// can be compiled</span></span><br><span class="line"></span><br><span class="line">function f = [](<span class="type">int</span> i)&#123;</span><br><span class="line">   <span class="keyword">if</span>(i&gt;<span class="number">0</span>) <span class="keyword">return</span> i;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">return</span> -i;</span><br><span class="line">&#125;<span class="comment">// can not be compiled</span></span><br><span class="line"></span><br><span class="line">function f = [](<span class="type">int</span> i) -&gt; <span class="type">int</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(i&gt;<span class="number">0</span>) <span class="keyword">return</span> i;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">return</span> -i;</span><br><span class="line">&#125;<span class="comment">// can  be compiled</span></span><br></pre></td></tr></table></figure>

<h3 id="参数绑定"><a href="#参数绑定" class="headerlink" title="参数绑定"></a>参数绑定</h3><p>bind 函数可以看作一个通用的函数适配器，它接受一个可调用的对象，生成一个新的可调用对象来适应原对象的参数列表。</p>
<p>使用场景：</p>
<p>已经有一个可以使用的函数，在调用lambda时想复用这个函数。</p>
<h4 id="重排函数参数"><a href="#重排函数参数" class="headerlink" title="重排函数参数"></a>重排函数参数</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isshorter</span><span class="params">(<span class="type">const</span> string &amp;a,<span class="type">const</span> string &amp;b)</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> a.<span class="built_in">size</span>() &lt; b.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;string&gt; words = &#123;<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bb&quot;</span>,<span class="string">&quot;ccc&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span>(), isshorter);<span class="comment">//words are sorted from short to long</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span>(), <span class="built_in">bind</span>(isshorter,_2,_1));<span class="comment">//words are sorted from long to short</span></span><br></pre></td></tr></table></figure>

<p>如果bind中的参数需要引用，需要使用ref函数和cref(#inclued &lt;functional&gt;),ref生成一个引用对象，cref则生成带const的引用对象</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果想要使用指定引用，使用ref</span></span><br><span class="line"><span class="function">ostream &amp;<span class="title">print</span><span class="params">(ostream&amp; os,string &amp;s, <span class="type">char</span> c)</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> os&lt;&lt;s&lt;&lt;c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for_each(words.<span class="built_in">begin</span>(),words.<span class="built_in">end</span>(),<span class="built_in">bind</span>(print,<span class="built_in">ref</span>(os),_1,<span class="string">&#x27; &#x27;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h2><p>在C++中使用动态内存很容易出问题，因为保证在正确的时间释放内存是及其困难的。忘记释放动态内存会导致内存泄漏的问题，其次在尚有指针应用内存的情况下释放了动态内存会导致引用非法内存的指针。</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">shared_ptr</td>
<td align="center">允许多个指针指向同一个对象</td>
</tr>
<tr>
<td align="center">unique_ptr</td>
<td align="center">“独占”所指向的对象</td>
</tr>
<tr>
<td align="center">weak_ptr</td>
<td align="center">伴随类，指向shared_ptr管理的对象</td>
</tr>
</tbody></table>
<h3 id="shared-ptr-的使用"><a href="#shared-ptr-的使用" class="headerlink" title="shared_ptr 的使用"></a>shared_ptr 的使用</h3><p>我们可以认为每一个 shared_ptr 都有一个关联的计数器，通常称其为引用计数，当拷贝一个 shared_ptr, 计数器都会增加。当 shared_ptr 的计数器变为 0，它就会自动释放自己所管理的对象。</p>
<p>最安全的分配和使用shared_ptr的方法是调用一个名为 make_shared 的标准库函数，此函数在动态分配一个对象并初始化它，返回指向此对象的 shared_ptr。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">shared_ptr&lt;<span class="type">int</span>&gt; p1 = <span class="built_in">make_shared</span>&lt;<span class="type">int</span>&gt;(<span class="number">42</span>);</span><br><span class="line">shared_ptr&lt;string&gt; p2 = <span class="built_in">make_shared</span>&lt;string&gt;(<span class="number">10</span>, <span class="string">&#x27;9&#x27;</span>);</span><br><span class="line"><span class="comment">// p3 指向一个初始化的int，即值为0</span></span><br><span class="line">shared_ptr&lt;<span class="type">int</span>&gt; p3 = <span class="built_in">make_shared</span>&lt;<span class="type">int</span>&gt;();</span><br></pre></td></tr></table></figure>

<p><strong>Note</strong>: 使用动态内存的一个常见原因是允许多个对象共享相同的状态。</p>
<h3 id="unique-ptr-的使用"><a href="#unique-ptr-的使用" class="headerlink" title="unique_ptr 的使用"></a>unique_ptr 的使用</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">unique_ptr&lt;<span class="type">double</span>&gt; p1; <span class="comment">//可以指向一个double的 unique_ptr</span></span><br><span class="line"><span class="function">unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">p2</span><span class="params">(newe <span class="type">int</span> (<span class="number">42</span>))</span></span>; <span class="comment">// p2指向一个值为 42 的int</span></span><br><span class="line">unique_ptr&lt;<span class="type">int</span>&gt; p3;</span><br><span class="line">p3 = p2;<span class="comment">// error! unique_ptr 不支持赋值</span></span><br><span class="line"></span><br><span class="line">p2 = <span class="literal">nullptr</span>; <span class="comment">// 释放 p2 原来指向的内存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 转移 unique_ptr的所有权</span></span><br><span class="line"></span><br><span class="line"><span class="function">unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">p4</span><span class="params">(p2.release())</span></span>;<span class="comment">// 将所有权从 p2 转移给 p4</span></span><br><span class="line"><span class="function">unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">p5</span><span class="params">(newe <span class="type">int</span> (<span class="number">40</span>))</span></span>;</span><br><span class="line">p4.<span class="built_in">reset</span>(p5.<span class="built_in">release</span>());<span class="comment">// 将所有权从 p5 转移给 p4, 并释放 p4 原来指向的内存</span></span><br><span class="line"></span><br><span class="line">p4.<span class="built_in">release</span>(); <span class="comment">// error p4 不会释放内存, release 函数只是切断了指针与对象的联系，而且此行为会导致丢失指针</span></span><br><span class="line"><span class="keyword">auto</span> p = p4.<span class="built_in">release</span>(); <span class="comment">// correct 需要 delete p 才能释放内存</span></span><br></pre></td></tr></table></figure>

<h3 id="weak-ptr-的使用"><a href="#weak-ptr-的使用" class="headerlink" title="weak_ptr 的使用"></a>weak_ptr 的使用</h3><p>weak_ptr 不参与计数器的增长，当最后一个 shared_ptr 被销毁时，即使有 weak_ptr 指向该对象, 该对象也会被释放。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> p = <span class="built_in">make_shared</span>&lt;<span class="type">int</span>&gt;(<span class="number">42</span>);</span><br><span class="line"><span class="function">weak_ptr&lt;<span class="type">int</span>&gt; <span class="title">wp</span><span class="params">(p)</span></span>; <span class="comment">// 创建 weak_ptr 时需要初始化 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于 weak_ptr 所指向的对象有可能为空, 所以不能使用 weak_ptr 直接调用对象, 要使用 lock 函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">auto</span> pp = wp.<span class="built_in">lock</span>())&#123; <span class="comment">// 如果 wp 所指对象不为空则可以进入条件语句中</span></span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>EffectiveCpp</title>
    <url>/undefined/2022/12/03/EffectiveCpp/</url>
    <content><![CDATA[<p>Rules:</p>
<ul>
<li>确定对象被使用前已先被初始化。如果不清空，使用gdb调试器查看addr内的变量，会是一些随机值，未来可能会导致意想不到的问题。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Grpc的一些知识</title>
    <url>/undefined/2022/11/11/Grpc%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="GRPC"><a href="#GRPC" class="headerlink" title="GRPC"></a>GRPC</h1><h2 id="ProtoBuf"><a href="#ProtoBuf" class="headerlink" title="ProtoBuf"></a>ProtoBuf</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><a href="https://developers.google.com/protocol-buffers/docs/overview">官方文档</a></p>
<p>protocol buffers （ProtoBuf）是一种语言无关、平台无关、可扩展的序列化结构数据的方法,它可用于（数据）通信协议、数据存储等.</p>
<p>Protocol Buffers 是一种灵活,高效,自动化机制的结构数据序列化方法－可类比 XML,但是比 XML 更小（3 ~ 10倍）、更快（20 ~ 100倍）、更为简单.</p>
<p>json\xml都是基于文本格式,protobuf是二进制格式.</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol>
<li><p>创建 .proto 文件,定义数据结构</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// filename: respose.proto</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定protobuf的版本,proto3是最新的语法版本,不指定则默认为proto2</span></span><br><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="comment">// 定义数据结构,message 你可以想象成java的class,c语言中的struct</span></span><br><span class="line">message Person &#123;</span><br><span class="line">    optional <span class="built_in">string</span> name = <span class="number">1</span>;<span class="comment">// 定义一个string类型的字段,字段名字为data, 字段号为1（字段号不能重复且唯一,删除字段的时候也尽量保持字段号,防止有人错误调用） </span></span><br><span class="line">    optional int32 id = <span class="number">2</span>;</span><br><span class="line">    optional <span class="built_in">string</span> email = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 序号是不能重复的,作为字段的位移标识</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将.proto文件,编译成指定语言类库(java)</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">john</span> <span class="operator">=</span> Person.newBuilder()</span><br><span class="line">    .setId(<span class="number">1234</span>)</span><br><span class="line">    .setName(<span class="string">&quot;John Doe&quot;</span>)</span><br><span class="line">    .setEmail(<span class="string">&quot;jdoe@example.com&quot;</span>)</span><br><span class="line">    .build();</span><br><span class="line">output = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(args[<span class="number">0</span>]);</span><br><span class="line">john.writeTo(output);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在代码中使用ProtoBuf对数据进行序列化和反序列化(c++)</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Person john;</span><br><span class="line"><span class="function">fstream <span class="title">input</span><span class="params">(argv[<span class="number">1</span>], ios::in | ios::binary)</span></span>;</span><br><span class="line">john.<span class="built_in">ParseFromIstream</span>(&amp;input);</span><br><span class="line"><span class="type">int</span> id = john.<span class="built_in">id</span>();</span><br><span class="line">std::string name = john.<span class="built_in">name</span>();</span><br><span class="line">std::string email = john.<span class="built_in">email</span>();</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><p>proto3利用package来标明类型,在C++中即定义为命名空间</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// In .proto</span></span><br><span class="line">package xxx;</span><br><span class="line"><span class="comment">// In .cc</span></span><br><span class="line"><span class="keyword">using</span> xxx::</span><br></pre></td></tr></table></figure>

<h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><p>message定义了proto的消息体，里面可以支持<a href="https://developers.google.com/protocol-buffers/docs/proto3#scalar">标量数据类型</a>, 复合数据类型等.字段号1-15使用一个字节,16-2047使用2个字节,尽量保留1-15给最频繁的元素.字段号$\in[1,2^{29}-1]$</p>
<p>在定义消息的字段时，可以定义字段规则.</p>
<table>
<thead>
<tr>
<th align="center">字段规则</th>
<th align="center">描述</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">singular</td>
<td align="center">字段号可以重复0或1次</td>
<td align="center">proto3的默认选择</td>
</tr>
<tr>
<td align="center">optional</td>
<td align="center">同singular, 字段号可以重复0或1次</td>
<td align="center">可以check该值是否被设置</td>
</tr>
<tr>
<td align="center">repeated</td>
<td align="center">字段号可以重复0或更多次</td>
<td align="center">重复的次序会被记录下来</td>
</tr>
</tbody></table>
<p>service定义rpc的服务</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">service SearchService &#123;</span><br><span class="line">  <span class="function">rpc <span class="title">Search</span><span class="params">(SearchRequest)</span> <span class="title">returns</span> <span class="params">(SearchResponse)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="一些其他的类型"><a href="#一些其他的类型" class="headerlink" title="一些其他的类型"></a>一些其他的类型</h4><p>oneof：在声明嵌套的数据类型时,oneof起到类似C++中union的作用,其使用方式如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// In .proto</span></span><br><span class="line">message SampleMessage &#123;</span><br><span class="line">  oneof test_oneof &#123;</span><br><span class="line">    string name = <span class="number">4</span>;</span><br><span class="line">    SubMessage sub_message = <span class="number">9</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// In .cc</span></span><br><span class="line">message.<span class="built_in">set_name</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="built_in">CHECK</span>(message.<span class="built_in">has_name</span>());</span><br><span class="line"><span class="comment">// Calling mutable_sub_message() will clear the name field and will set</span></span><br><span class="line"><span class="comment">// sub_message to a new instance of SubMessage with none of its fields set</span></span><br><span class="line">message.<span class="built_in">mutable_sub_message</span>();</span><br><span class="line"><span class="built_in">CHECK</span>(!message.<span class="built_in">has_name</span>());</span><br></pre></td></tr></table></figure>

<p>enum：枚举类型,定义枚举的时候，我们要保证第一个枚举值必须是0，枚举值不能重复，除非使用<code>option allow_alias = true</code>选项来开启别名,枚举值的范围为32位整数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">EnumAllowingAlias</span> &#123;</span><br><span class="line">    option allow_alias = <span class="literal">true</span>;<span class="comment">//</span></span><br><span class="line">    UNKNOWN = <span class="number">0</span>;</span><br><span class="line">    STARTED = <span class="number">1</span>;</span><br><span class="line">    RUNNING = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><h4 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">EnumAllowingAlias</span> &#123;</span></span><br><span class="line">  option allow_alias = <span class="literal">true</span>;<span class="comment">//默认为false,不允许两个字段名公用一个字段号</span></span><br><span class="line">  EAA_UNSPECIFIED = <span class="number">0</span>;<span class="comment">//从0开始</span></span><br><span class="line">  EAA_STARTED = <span class="number">1</span>;</span><br><span class="line">  EAA_RUNNING = <span class="number">1</span>;</span><br><span class="line">  EAA_FINISHED = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">EnumNotAllowingAlias</span> &#123;</span></span><br><span class="line">  ENAA_UNSPECIFIED = <span class="number">0</span>;</span><br><span class="line">  ENAA_STARTED = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// ENAA_RUNNING = 1;  // Uncommenting this line will cause a compile error inside Google and a warning message outside.</span></span><br><span class="line">  ENAA_FINISHED = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="grpc"><a href="#grpc" class="headerlink" title="grpc"></a>grpc</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>gRPC（Google Remote Procedure Call）是一款语言中立、平台中立、开源的远程过程调用(RPC)系统，使得能够更容易地创建分布式应用和服务,其基于HTTP&#x2F;2和ProtoBuf</p>
<blockquote>
<p>HTTP&#x2F;2 提供了连接多路复用、双向流、服务器推送、请求优先级、首部压缩等机制.可以节省带宽、降低TCP链接次数、节省CPU，帮助移动设备延长电池寿命等.</p>
</blockquote>
<p>优点：</p>
<ul>
<li>protobuf二进制消息，性能好&#x2F;效率高（空间和时间效率都很不错）</li>
<li>proto文件生成目标代码，简单易用</li>
<li>序列化反序列化直接对应程序中的数据类，不需要解析后在进行映射(XML,JSON都是这种方式)</li>
<li>支持向前兼容（新加字段采用默认值）和向后兼容（忽略新加字段），简化升级</li>
<li>支持多种语言（可以把proto文件看做IDL文件）</li>
</ul>
<p>缺点：</p>
<ul>
<li>GRPC尚未提供连接池，需要自行实现</li>
<li>尚未提供“服务发现”、“负载均衡”机制</li>
<li>因为基于HTTP2，绝大部多数HTTP Server、Nginx都尚不支持，即Nginx不能将GRPC请求作为HTTP请求来负载均衡，而是作为普通的TCP请求.（nginx1.9版本已支持）</li>
<li>Protobuf二进制可读性差（貌似提供了Text_Fromat功能）</li>
</ul>
<h3 id="简单流程"><a href="#简单流程" class="headerlink" title="简单流程"></a>简单流程</h3><p><a href="https://grpc.io/docs/languages/cpp/basics/">官方文档</a></p>
<ol>
<li>在.proto中定义服务</li>
<li>运用protocol buffer编译器生成客户端和服务端的代码</li>
<li>运用c++的grpc API写客户端和服务端</li>
</ol>
<h3 id="service种类"><a href="#service种类" class="headerlink" title="service种类"></a>service种类</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">service RouteGuide &#123;</span><br><span class="line">    <span class="function">rpc <span class="title">GetFeature</span><span class="params">(Point)</span> <span class="title">returns</span> <span class="params">(Feature)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function">rpc <span class="title">ListFeatures</span><span class="params">(Rectangle)</span> <span class="title">returns</span> <span class="params">(stream Feature)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function">rpc <span class="title">RecordRoute</span><span class="params">(stream Point)</span> <span class="title">returns</span> <span class="params">(RouteSummary)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function">rpc <span class="title">RouteChat</span><span class="params">(stream RouteNote)</span> <span class="title">returns</span> <span class="params">(stream RouteNote)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="server端的实现"><a href="#server端的实现" class="headerlink" title="server端的实现"></a>server端的实现</h3><h4 id="第一步：继承Service-类"><a href="#第一步：继承Service-类" class="headerlink" title="第一步：继承Service 类"></a>第一步：继承Service 类</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现Service类的接口（同步接口）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RouteGuideImpl</span> <span class="keyword">final</span> : <span class="keyword">public</span> RouteGuide::Service &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或实现Service类的接口（异步接口）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RouteGuideImpl</span> <span class="keyword">final</span> : <span class="keyword">public</span> RouteGuide::AsyncService &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="第二步：实现Service的功能"><a href="#第二步：实现Service的功能" class="headerlink" title="第二步：实现Service的功能"></a>第二步：实现Service的功能</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 点对点</span></span><br><span class="line"><span class="function">Status <span class="title">GetFeature</span><span class="params">(ServerContext* context, <span class="type">const</span> Point* point,</span></span></span><br><span class="line"><span class="params"><span class="function">                  Feature* feature)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 定义service 的操作</span></span><br><span class="line">  <span class="comment">// notation!!!! 所有的服务是被多线程调用的,要保证线程安全</span></span><br><span class="line">  feature-&gt;<span class="built_in">set_name</span>(<span class="built_in">GetFeatureName</span>(*point, feature_list_));</span><br><span class="line">  feature-&gt;<span class="built_in">mutable_location</span>()-&gt;<span class="built_in">CopyFrom</span>(*point);</span><br><span class="line">  <span class="comment">// 返回状态码</span></span><br><span class="line">  <span class="keyword">return</span> Status::OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点到流</span></span><br><span class="line"><span class="function">Status <span class="title">ListFeatures</span><span class="params">(ServerContext* context, <span class="type">const</span> Rectangle* rectangle,</span></span></span><br><span class="line"><span class="params"><span class="function">                    ServerWriter&lt;Feature&gt;* writer)</span> <span class="keyword">override</span> </span>&#123;<span class="comment">// 用ServerWriter容器处理流数据,用于返回给client</span></span><br><span class="line">  <span class="keyword">auto</span> lo = rectangle-&gt;<span class="built_in">lo</span>();</span><br><span class="line">  <span class="keyword">auto</span> hi = rectangle-&gt;<span class="built_in">hi</span>();</span><br><span class="line">  <span class="type">long</span> left = std::<span class="built_in">min</span>(lo.<span class="built_in">longitude</span>(), hi.<span class="built_in">longitude</span>());</span><br><span class="line">  <span class="type">long</span> right = std::<span class="built_in">max</span>(lo.<span class="built_in">longitude</span>(), hi.<span class="built_in">longitude</span>());</span><br><span class="line">  <span class="type">long</span> top = std::<span class="built_in">max</span>(lo.<span class="built_in">latitude</span>(), hi.<span class="built_in">latitude</span>());</span><br><span class="line">  <span class="type">long</span> bottom = std::<span class="built_in">min</span>(lo.<span class="built_in">latitude</span>(), hi.<span class="built_in">latitude</span>());</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">const</span> Feature&amp; f : feature_list_) &#123;<span class="comment">// &quot;message名_list_&quot; 代表某message流数据</span></span><br><span class="line">    <span class="keyword">if</span> (f.<span class="built_in">location</span>().<span class="built_in">longitude</span>() &gt;= left &amp;&amp;</span><br><span class="line">        f.<span class="built_in">location</span>().<span class="built_in">longitude</span>() &lt;= right &amp;&amp;</span><br><span class="line">        f.<span class="built_in">location</span>().<span class="built_in">latitude</span>() &gt;= bottom &amp;&amp;</span><br><span class="line">        f.<span class="built_in">location</span>().<span class="built_in">latitude</span>() &lt;= top) &#123;</span><br><span class="line">      writer-&gt;<span class="built_in">Write</span>(f);<span class="comment">// 运用Write方法写入数据流</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回状态码</span></span><br><span class="line">  <span class="keyword">return</span> Status::OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 流到流</span></span><br><span class="line"><span class="function">Status <span class="title">RouteChat</span><span class="params">(ServerContext* context,</span></span></span><br><span class="line"><span class="params"><span class="function">                  ServerReaderWriter&lt;RouteNote, RouteNote&gt;* stream)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">  RouteNote note;</span><br><span class="line">  <span class="comment">//ServerReaderWriter 既能读又能写,流到单时用的是ServerReader</span></span><br><span class="line">  <span class="keyword">while</span> (stream-&gt;<span class="built_in">Read</span>(&amp;note)) &#123;<span class="comment">// 处理流数据的方式就是用循环控制一个个读入request的内容</span></span><br><span class="line">    <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mu_)</span></span>;<span class="comment">//上锁！！！</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> RouteNote&amp; n : received_notes_) &#123;<span class="comment">// received_notes_ 是输入流</span></span><br><span class="line">      <span class="keyword">if</span> (n.<span class="built_in">location</span>().<span class="built_in">latitude</span>() == note.<span class="built_in">location</span>().<span class="built_in">latitude</span>() &amp;&amp;</span><br><span class="line">          n.<span class="built_in">location</span>().<span class="built_in">longitude</span>() == note.<span class="built_in">location</span>().<span class="built_in">longitude</span>()) &#123;</span><br><span class="line">        stream-&gt;<span class="built_in">Write</span>(n);<span class="comment">// 运用Write方法写入数据流</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    received_notes_.<span class="built_in">push_back</span>(note);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> Status::OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="第三步-启动服务器"><a href="#第三步-启动服务器" class="headerlink" title="第三步,启动服务器"></a>第三步,启动服务器</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">RunServer</span><span class="params">(<span class="type">const</span> std::string&amp; db_path)</span> </span>&#123;</span><br><span class="line">  <span class="function">std::string <span class="title">server_address</span><span class="params">(<span class="string">&quot;0.0.0.0:50051&quot;</span>)</span></span>;</span><br><span class="line">  <span class="function">RouteGuideImpl <span class="title">service</span><span class="params">(db_path)</span></span>;</span><br><span class="line"></span><br><span class="line">  ServerBuilder builder;<span class="comment">// 用于创建服务端实例</span></span><br><span class="line">  builder.<span class="built_in">AddListeningPort</span>(server_address, grpc::<span class="built_in">InsecureServerCredentials</span>());<span class="comment">//绑定端口</span></span><br><span class="line">  builder.<span class="built_in">RegisterService</span>(&amp;service);<span class="comment">// 注册服务</span></span><br><span class="line">  <span class="function">std::unique_ptr&lt;Server&gt; <span class="title">server</span><span class="params">(builder.BuildAndStart())</span></span>;<span class="comment">// 创建和启动grpc服务器</span></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Server listening on &quot;</span> &lt;&lt; server_address &lt;&lt; std::endl;</span><br><span class="line">  server-&gt;<span class="built_in">Wait</span>();<span class="comment">// 阻塞等待被唤醒或者shutdown</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="client端的实现"><a href="#client端的实现" class="headerlink" title="client端的实现"></a>client端的实现</h3><h4 id="第一步：创建stub"><a href="#第一步：创建stub" class="headerlink" title="第一步：创建stub"></a>第一步：创建stub</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 建立通道channel</span></span><br><span class="line">grpc::<span class="built_in">CreateChannel</span>(<span class="string">&quot;localhost:50051&quot;</span>, grpc::<span class="built_in">InsecureChannelCredentials</span>());</span><br><span class="line"><span class="comment">// 通过channel创建stub</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"> <span class="built_in">RouteGuideClient</span>(std::shared_ptr&lt;ChannelInterface&gt; channel,</span><br><span class="line">                  <span class="type">const</span> std::string&amp; db)</span><br><span class="line">     : <span class="built_in">stub_</span>(RouteGuide::<span class="built_in">NewStub</span>(channel)) &#123;</span><br><span class="line">   ...</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h4 id="第二步：调用服务"><a href="#第二步：调用服务" class="headerlink" title="第二步：调用服务"></a>第二步：调用服务</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 点到点</span></span><br><span class="line">Point point;</span><br><span class="line">Feature feature;</span><br><span class="line">point = <span class="built_in">MakePoint</span>(<span class="number">409146138</span>, <span class="number">-746188906</span>);</span><br><span class="line"><span class="built_in">GetOneFeature</span>(point, &amp;feature);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GetOneFeature</span><span class="params">(<span class="type">const</span> Point&amp; point, Feature* feature)</span> </span>&#123;</span><br><span class="line">  ClientContext context;</span><br><span class="line">  Status status = stub_-&gt;<span class="built_in">GetFeature</span>(&amp;context, point, feature);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点到流</span></span><br><span class="line">std::unique_ptr&lt;ClientReader&lt;Feature&gt; &gt; <span class="built_in">reader</span>(</span><br><span class="line">    stub_-&gt;<span class="built_in">ListFeatures</span>(&amp;context, rect));</span><br><span class="line"><span class="keyword">while</span> (reader-&gt;<span class="built_in">Read</span>(&amp;feature)) &#123;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Found feature called &quot;</span></span><br><span class="line">            &lt;&lt; feature.<span class="built_in">name</span>() &lt;&lt; <span class="string">&quot; at &quot;</span></span><br><span class="line">            &lt;&lt; feature.<span class="built_in">location</span>().<span class="built_in">latitude</span>()/kCoordFactor_ &lt;&lt; <span class="string">&quot;, &quot;</span></span><br><span class="line">            &lt;&lt; feature.<span class="built_in">location</span>().<span class="built_in">longitude</span>()/kCoordFactor_ &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">Status status = reader-&gt;<span class="built_in">Finish</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 流到.</span></span><br><span class="line">std::unique_ptr&lt;ClientWriter&lt;Point&gt; &gt; <span class="built_in">writer</span>(</span><br><span class="line">    stub_-&gt;<span class="built_in">RecordRoute</span>(&amp;context, &amp;stats));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; kPoints; i++) &#123;</span><br><span class="line">  <span class="type">const</span> Feature&amp; f = feature_list_[<span class="built_in">feature_distribution</span>(generator)];</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Visiting point &quot;</span></span><br><span class="line">            &lt;&lt; f.<span class="built_in">location</span>().<span class="built_in">latitude</span>()/kCoordFactor_ &lt;&lt; <span class="string">&quot;, &quot;</span></span><br><span class="line">            &lt;&lt; f.<span class="built_in">location</span>().<span class="built_in">longitude</span>()/kCoordFactor_ &lt;&lt; std::endl;</span><br><span class="line">  <span class="keyword">if</span> (!writer-&gt;<span class="built_in">Write</span>(f.<span class="built_in">location</span>())) &#123;</span><br><span class="line">    <span class="comment">// Broken stream.</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(</span><br><span class="line">      <span class="built_in">delay_distribution</span>(generator)));</span><br><span class="line">&#125;</span><br><span class="line">writer-&gt;<span class="built_in">WritesDone</span>();</span><br><span class="line">Status status = writer-&gt;<span class="built_in">Finish</span>();</span><br><span class="line"><span class="keyword">if</span> (status.<span class="built_in">IsOk</span>()) &#123;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Finished trip with &quot;</span> &lt;&lt; stats.<span class="built_in">point_count</span>() &lt;&lt; <span class="string">&quot; points\n&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;Passed &quot;</span> &lt;&lt; stats.<span class="built_in">feature_count</span>() &lt;&lt; <span class="string">&quot; features\n&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;Travelled &quot;</span> &lt;&lt; stats.<span class="built_in">distance</span>() &lt;&lt; <span class="string">&quot; meters\n&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;It took &quot;</span> &lt;&lt; stats.<span class="built_in">elapsed_time</span>() &lt;&lt; <span class="string">&quot; seconds&quot;</span></span><br><span class="line">            &lt;&lt; std::endl;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;RecordRoute rpc failed.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="样例1-同步返回消息"><a href="#样例1-同步返回消息" class="headerlink" title="样例1: 同步返回消息"></a>样例1: 同步返回消息</h3><h4 id="proto文件"><a href="#proto文件" class="headerlink" title=".proto文件"></a>.proto文件</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;<span class="comment">// use proto3, not proto2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// java need these lines</span></span><br><span class="line">option java_multiple_files = <span class="literal">true</span>;</span><br><span class="line">option java_package = <span class="string">&quot;io.grpc.examples.helloworld&quot;</span>;</span><br><span class="line">option java_outer_classname = <span class="string">&quot;HelloWorldProto&quot;</span>;</span><br><span class="line">option objc_class_prefix = <span class="string">&quot;HLW&quot;</span>;</span><br><span class="line"></span><br><span class="line">package helloworld;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// The greeting service definition.</span></span><br><span class="line">service Greeter &#123;</span><br><span class="line">  <span class="comment">// Sends a greeting</span></span><br><span class="line">  <span class="function">rpc <span class="title">SayHello</span> <span class="params">(HelloRequest)</span> <span class="title">returns</span> <span class="params">(HelloReply)</span> </span>&#123;&#125; <span class="comment">// define a rpc service</span></span><br><span class="line">  <span class="function">rpc <span class="title">SayHelloAgain</span> <span class="params">(HelloRequest)</span> <span class="title">returns</span> <span class="params">(HelloReply)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The request message containing the user&#x27;s name.</span></span><br><span class="line">message HelloRequest &#123;</span><br><span class="line">  string name = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The response message containing the greetings</span></span><br><span class="line">message HelloReply &#123;</span><br><span class="line">  string message = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="server-cc"><a href="#server-cc" class="headerlink" title="server.cc"></a>server.cc</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Logic and data behind the server&#x27;s behavior.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GreeterServiceImpl</span> <span class="keyword">final</span> : <span class="keyword">public</span> Greeter::Service &#123;</span><br><span class="line">  <span class="function">Status <span class="title">SayHello</span><span class="params">(ServerContext* context, <span class="type">const</span> HelloRequest* request,</span></span></span><br><span class="line"><span class="params"><span class="function">                  HelloReply* reply)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="function">std::string <span class="title">prefix</span><span class="params">(<span class="string">&quot;Hello &quot;</span>)</span></span>;</span><br><span class="line">    reply-&gt;<span class="built_in">set_message</span>(prefix + request-&gt;<span class="built_in">name</span>());</span><br><span class="line">    <span class="keyword">return</span> Status::OK;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">Status <span class="title">SayHelloAgain</span><span class="params">(ServerContext *context, <span class="type">const</span> HelloRequest* request,</span></span></span><br><span class="line"><span class="params"><span class="function">                       HelloReply* reply)</span> <span class="keyword">override</span></span>&#123;</span><br><span class="line">    <span class="function">std::string <span class="title">prefix</span><span class="params">(<span class="string">&quot;Hello again &quot;</span>)</span></span>;</span><br><span class="line">    std::string reversename = request-&gt;<span class="built_in">name</span>();</span><br><span class="line">    std::<span class="built_in">reverse</span>(reversename.<span class="built_in">begin</span>(),reversename.<span class="built_in">end</span>());</span><br><span class="line">    reply-&gt;<span class="built_in">set_message</span>(prefix+reversename);</span><br><span class="line">    <span class="keyword">return</span> Status::OK;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// run the server</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RunServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">std::string <span class="title">server_address</span><span class="params">(<span class="string">&quot;0.0.0.0:50051&quot;</span>)</span></span>;</span><br><span class="line">  GreeterServiceImpl service;<span class="comment">// 定义的服务类</span></span><br><span class="line"></span><br><span class="line">  grpc::<span class="built_in">EnableDefaultHealthCheckService</span>(<span class="literal">true</span>);</span><br><span class="line">  grpc::reflection::<span class="built_in">InitProtoReflectionServerBuilderPlugin</span>();</span><br><span class="line">  ServerBuilder builder;</span><br><span class="line">  <span class="comment">// Listen on the given address without any authentication mechanism.</span></span><br><span class="line">  builder.<span class="built_in">AddListeningPort</span>(server_address, grpc::<span class="built_in">InsecureServerCredentials</span>());<span class="comment">// 监听端口</span></span><br><span class="line">  <span class="comment">// Register &quot;service&quot; as the instance through which we&#x27;ll communicate with</span></span><br><span class="line">  <span class="comment">// clients. In this case it corresponds to an *synchronous* service.</span></span><br><span class="line">  builder.<span class="built_in">RegisterService</span>(&amp;service);<span class="comment">// 注册service</span></span><br><span class="line">  <span class="comment">// Finally assemble the server.</span></span><br><span class="line">  <span class="function">std::unique_ptr&lt;Server&gt; <span class="title">server</span><span class="params">(builder.BuildAndStart())</span></span>;<span class="comment">//组装服务</span></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Server listening on &quot;</span> &lt;&lt; server_address &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Wait for the server to shutdown. Note that some other thread must be</span></span><br><span class="line">  <span class="comment">// responsible for shutting down the server for this call to ever return.</span></span><br><span class="line">  server-&gt;<span class="built_in">Wait</span>();<span class="comment">// 启动并监听服务</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">RunServer</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="client-cc"><a href="#client-cc" class="headerlink" title="client.cc"></a>client.cc</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GreeterClient</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">GreeterClient</span>(std::shared_ptr&lt;Channel&gt; channel)<span class="comment">// 根据端口地址建立通信通道</span></span><br><span class="line">      : <span class="built_in">stub_</span>(Greeter::<span class="built_in">NewStub</span>(channel)) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Assembles the client&#x27;s payload, sends it and presents the response back</span></span><br><span class="line">  <span class="comment">// from the server.</span></span><br><span class="line">  <span class="function">std::string <span class="title">SayHello</span><span class="params">(<span class="type">const</span> std::string&amp; user)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Data we are sending to the server.</span></span><br><span class="line">    HelloRequest request;</span><br><span class="line">    request.<span class="built_in">set_name</span>(user);<span class="comment">// set_参数名 用于设置消息的内容</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Container for the data we expect from the server.</span></span><br><span class="line">    HelloReply reply;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Context for the client. It could be used to convey extra information to</span></span><br><span class="line">    <span class="comment">// the server and/or tweak certain RPC behaviors.</span></span><br><span class="line">    ClientContext context;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The actual RPC.</span></span><br><span class="line">    Status status = stub_-&gt;<span class="built_in">SayHello</span>(&amp;context, request, &amp;reply);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Act upon its status.</span></span><br><span class="line">    <span class="keyword">if</span> (status.<span class="built_in">ok</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> reply.<span class="built_in">message</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      std::cout &lt;&lt; status.<span class="built_in">error_code</span>() &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; status.<span class="built_in">error_message</span>()</span><br><span class="line">                &lt;&lt; std::endl;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;RPC failed&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::string <span class="title">SayHelloAgain</span><span class="params">(<span class="type">const</span> std::string&amp; user)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Follows the same pattern as SayHello.</span></span><br><span class="line">    HelloRequest request;</span><br><span class="line">    request.<span class="built_in">set_name</span>(user);</span><br><span class="line">    HelloReply reply;</span><br><span class="line">    ClientContext context;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Here we can use the stub&#x27;s newly available method we just added.</span></span><br><span class="line">    Status status = stub_-&gt;<span class="built_in">SayHelloAgain</span>(&amp;context, request, &amp;reply);<span class="comment">// 调用服务端的已定义service</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Act upon its status.</span></span><br><span class="line">    <span class="keyword">if</span> (status.<span class="built_in">ok</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> reply.<span class="built_in">message</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      std::cout &lt;&lt; status.<span class="built_in">error_code</span>() &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; status.<span class="built_in">error_message</span>()</span><br><span class="line">                &lt;&lt; std::endl;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;RPC failed&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  std::unique_ptr&lt;Greeter::Stub&gt; stub_;<span class="comment">// 通信所用的类</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Instantiate the client. It requires a channel, out of which the actual RPCs</span></span><br><span class="line">  <span class="comment">// are created. This channel models a connection to an endpoint specified by</span></span><br><span class="line">  <span class="comment">// the argument &quot;--target=&quot; which is the only expected argument.</span></span><br><span class="line">  <span class="comment">// We indicate that the channel isn&#x27;t authenticated (use of</span></span><br><span class="line">  <span class="comment">// InsecureChannelCredentials()).</span></span><br><span class="line">  std::string target_str;</span><br><span class="line">  <span class="function">std::string <span class="title">arg_str</span><span class="params">(<span class="string">&quot;--target&quot;</span>)</span></span>;</span><br><span class="line">  <span class="keyword">if</span> (argc &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    std::string arg_val = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="type">size_t</span> start_pos = arg_val.<span class="built_in">find</span>(arg_str);</span><br><span class="line">    <span class="keyword">if</span> (start_pos != std::string::npos) &#123;</span><br><span class="line">      start_pos += arg_str.<span class="built_in">size</span>();</span><br><span class="line">      <span class="keyword">if</span> (arg_val[start_pos] == <span class="string">&#x27;=&#x27;</span>) &#123;</span><br><span class="line">        target_str = arg_val.<span class="built_in">substr</span>(start_pos + <span class="number">1</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;The only correct argument syntax is --target=&quot;</span></span><br><span class="line">                  &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      std::cout &lt;&lt; <span class="string">&quot;The only acceptable argument is --target=&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    target_str = <span class="string">&quot;localhost:50051&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 通过channel 建立与目标端口的连接,用于与服务端通信</span></span><br><span class="line">  <span class="function">GreeterClient <span class="title">greeter</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">      grpc::CreateChannel(target_str, grpc::InsecureChannelCredentials()))</span></span>;</span><br><span class="line">  <span class="function">std::string <span class="title">user</span><span class="params">(<span class="string">&quot;world&quot;</span>)</span></span>;</span><br><span class="line">  std::string reply = greeter.<span class="built_in">SayHello</span>(user);</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Greeter received: &quot;</span> &lt;&lt; reply &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  reply = greeter.<span class="built_in">SayHelloAgain</span>(user);</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Greeter received: &quot;</span> &lt;&lt; reply &lt;&lt; std::endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>如何利用Hexo配置github界面</title>
    <url>/undefined/2022/11/10/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8Hexo%E9%85%8D%E7%BD%AEgithub%E7%95%8C%E9%9D%A2/</url>
    <content><![CDATA[<h2 id="创建github账户和仓库"><a href="#创建github账户和仓库" class="headerlink" title="创建github账户和仓库"></a>创建github账户和仓库</h2><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>下载安装<a href="https://nodejs.org/en/download/">Node.js</a>,根据自己平台的属性选择,这里采用的环境是Ubuntu 20.04.</p>
<p>安装完成以后在bash中输入<code>node -v</code>和<code>npm -v</code>命令查看安装是否成功.</p>
<p>[option]如果没有梯子，可以选择添加国内镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>

<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>下载安装<a href="https://git-scm.com/downloads">Git</a></p>
<p>安装完成以后在bash中输入<code>git --version</code>验证是否安装成功.</p>
<h2 id="利用npm安装hexo"><a href="#利用npm安装hexo" class="headerlink" title="利用npm安装hexo"></a>利用npm安装hexo</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> blog &amp;&amp; <span class="built_in">cd</span> blog</span><br><span class="line"><span class="comment"># 安装Hexo</span></span><br><span class="line">npm i hexo-cli -g</span><br><span class="line"><span class="comment"># 查看Hexo版本</span></span><br><span class="line">hexo -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化hexo</span></span><br><span class="line">hexo init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装必要组件</span></span><br><span class="line">npm i hexo-deployer-git</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><p>输入<code>hexo new post &quot;article title&quot;</code>,新建文章,进入<code>source/_posts/</code>文件夹下修改相应的<code>.md</code>文件</p>
<p>输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>本地预览效果，最后输入<code>hexo d</code>上传到github上</p>
<h2 id="保存源代码"><a href="#保存源代码" class="headerlink" title="保存源代码"></a>保存源代码</h2><ol>
<li>创建github仓库(不需要创建readme),并获取到仓库的地址“<a href="mailto:&#103;&#105;&#x74;&#64;&#103;&#105;&#x74;&#x68;&#117;&#x62;&#x2e;&#x63;&#x6f;&#109;">&#103;&#105;&#x74;&#64;&#103;&#105;&#x74;&#x68;&#117;&#x62;&#x2e;&#x63;&#x6f;&#109;</a>:xxx&#x2F;blog.git”</li>
<li>在当前目录下执行以下命令</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin git@github.com:xxx/matlablearning.git </span><br><span class="line">git branch -b main</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;xxx&quot;</span></span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure>

<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g  <span class="comment"># generate static pages</span></span><br><span class="line">hexo s  <span class="comment"># start the server locally</span></span><br><span class="line">hexo d  <span class="comment"># update the pages to server</span></span><br><span class="line"></span><br><span class="line">hexo new [post] <span class="string">&quot;article name&quot;</span> <span class="comment"># generate a new article in source/_posts/ </span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/undefined/2022/11/10/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>question</title>
    <url>/undefined/2023/01/12/question/</url>
    <content><![CDATA[<h2 id="如何区别大小端机器码？"><a href="#如何区别大小端机器码？" class="headerlink" title="如何区别大小端机器码？"></a>如何区别大小端机器码？</h2><p>对于一个32位字0x1234567, 在小端存储中，高序字节是放在内的低地址，而在大端存储中，高序字节是存放在内存的高地址。具体的描述可以看下图。</p>

<!-- ![实例](BbigSmallStroe.gif) -->
]]></content>
  </entry>
</search>
